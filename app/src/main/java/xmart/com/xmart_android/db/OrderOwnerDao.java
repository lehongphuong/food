package xmart.com.xmart_android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "ORDER_OWNER".
*/
public class OrderOwnerDao extends AbstractDao<OrderOwner, String> {

    public static final String TABLENAME = "ORDER_OWNER";



    /**
     * Properties of entity OrderOwner.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property UserId = new Property(1, String.class, "UserId", false, "USER_ID");
        public final static Property OwnerId  = new Property(2, String.class, "OwnerId ", false, "OWNER_ID ");
        public final static Property Total = new Property(3, String.class, "Total", false, "TOTAL");
        public final static Property Status = new Property(4, String.class, "Status", false, "STATUS");
        public final static Property LastName = new Property(5, String.class, "LastName", false, "LAST_NAME");
        public final static Property PhoneNumber  = new Property(6, String.class, "PhoneNumber ", false, "PHONE_NUMBER ");
        public final static Property HomeAddr = new Property(7, String.class, "HomeAddr", false, "HOME_ADDR");
        public final static Property WorkAddr = new Property(8, String.class, "WorkAddr", false, "WORK_ADDR");
        public final static Property Gender = new Property(9, String.class, "Gender", false, "GENDER");
        public final static Property FirstName  = new Property(10, String.class, "FirstName ", false, "FIRST_NAME ");
        public final static Property Ordered = new Property(11, String.class, "Ordered", false, "ORDERED");
        public final static Property Processed  = new Property(12, String.class, "Processed ", false, "PROCESSED ");
        public final static Property Canceled = new Property(13, String.class, "Canceled", false, "CANCELED");
        public final static Property Completed = new Property(14, String.class, "Completed", false, "COMPLETED");
        public final static Property ShopName = new Property(15, String.class, "ShopName", false, "SHOP_NAME");
    };


    public OrderOwnerDao(DaoConfig config) {
        super(config);
    }
    
    public OrderOwnerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_OWNER\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"USER_ID\" TEXT," + // 1: UserId
                "\"OWNER_ID \" TEXT," + // 2: OwnerId 
                "\"TOTAL\" TEXT," + // 3: Total
                "\"STATUS\" TEXT," + // 4: Status
                "\"LAST_NAME\" TEXT," + // 5: LastName
                "\"PHONE_NUMBER \" TEXT," + // 6: PhoneNumber 
                "\"HOME_ADDR\" TEXT," + // 7: HomeAddr
                "\"WORK_ADDR\" TEXT," + // 8: WorkAddr
                "\"GENDER\" TEXT," + // 9: Gender
                "\"FIRST_NAME \" TEXT," + // 10: FirstName 
                "\"ORDERED\" TEXT," + // 11: Ordered
                "\"PROCESSED \" TEXT," + // 12: Processed 
                "\"CANCELED\" TEXT," + // 13: Canceled
                "\"COMPLETED\" TEXT," + // 14: Completed
                "\"SHOP_NAME\" TEXT);"); // 15: ShopName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_OWNER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderOwner entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(2, UserId);
        }
 
        String OwnerId  = entity.getOwnerId ();
        if (OwnerId  != null) {
            stmt.bindString(3, OwnerId );
        }
 
        String Total = entity.getTotal();
        if (Total != null) {
            stmt.bindString(4, Total);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(5, Status);
        }
 
        String LastName = entity.getLastName();
        if (LastName != null) {
            stmt.bindString(6, LastName);
        }
 
        String PhoneNumber  = entity.getPhoneNumber ();
        if (PhoneNumber  != null) {
            stmt.bindString(7, PhoneNumber );
        }
 
        String HomeAddr = entity.getHomeAddr();
        if (HomeAddr != null) {
            stmt.bindString(8, HomeAddr);
        }
 
        String WorkAddr = entity.getWorkAddr();
        if (WorkAddr != null) {
            stmt.bindString(9, WorkAddr);
        }
 
        String Gender = entity.getGender();
        if (Gender != null) {
            stmt.bindString(10, Gender);
        }
 
        String FirstName  = entity.getFirstName ();
        if (FirstName  != null) {
            stmt.bindString(11, FirstName );
        }
 
        String Ordered = entity.getOrdered();
        if (Ordered != null) {
            stmt.bindString(12, Ordered);
        }
 
        String Processed  = entity.getProcessed ();
        if (Processed  != null) {
            stmt.bindString(13, Processed );
        }
 
        String Canceled = entity.getCanceled();
        if (Canceled != null) {
            stmt.bindString(14, Canceled);
        }
 
        String Completed = entity.getCompleted();
        if (Completed != null) {
            stmt.bindString(15, Completed);
        }
 
        String ShopName = entity.getShopName();
        if (ShopName != null) {
            stmt.bindString(16, ShopName);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrderOwner readEntity(Cursor cursor, int offset) {
        OrderOwner entity = new OrderOwner( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // OwnerId 
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Total
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // LastName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // PhoneNumber 
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // HomeAddr
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // WorkAddr
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Gender
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // FirstName 
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Ordered
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Processed 
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // Canceled
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // Completed
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // ShopName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderOwner entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOwnerId (cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTotal(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhoneNumber (cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHomeAddr(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWorkAddr(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGender(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFirstName (cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOrdered(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setProcessed (cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCanceled(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCompleted(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setShopName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(OrderOwner entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(OrderOwner entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

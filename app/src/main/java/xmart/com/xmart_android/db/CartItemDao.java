package xmart.com.xmart_android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CART_ITEM".
*/
public class CartItemDao extends AbstractDao<CartItem, String> {

    public static final String TABLENAME = "CART_ITEM";

    /**
     * Properties of entity CartItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property ProductId = new Property(1, String.class, "ProductId", false, "PRODUCT_ID");
        public final static Property ProductName = new Property(2, String.class, "ProductName", false, "PRODUCT_NAME");
        public final static Property ShopName = new Property(3, String.class, "ShopName", false, "SHOP_NAME");
        public final static Property UnitsName = new Property(4, String.class, "UnitsName", false, "UNITS_NAME");
        public final static Property Price = new Property(5, String.class, "Price", false, "PRICE");
        public final static Property Quantity = new Property(6, String.class, "Quantity", false, "QUANTITY");
        public final static Property Amount = new Property(7, String.class, "Amount", false, "AMOUNT");
        public final static Property ShowEditQuantity = new Property(8, String.class, "showEditQuantity", false, "SHOW_EDIT_QUANTITY");
    };


    public CartItemDao(DaoConfig config) {
        super(config);
    }
    
    public CartItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CART_ITEM\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"PRODUCT_ID\" TEXT," + // 1: ProductId
                "\"PRODUCT_NAME\" TEXT," + // 2: ProductName
                "\"SHOP_NAME\" TEXT," + // 3: ShopName
                "\"UNITS_NAME\" TEXT," + // 4: UnitsName
                "\"PRICE\" TEXT," + // 5: Price
                "\"QUANTITY\" TEXT," + // 6: Quantity
                "\"AMOUNT\" TEXT," + // 7: Amount
                "\"SHOW_EDIT_QUANTITY\" TEXT);"); // 8: showEditQuantity
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CART_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CartItem entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String ProductId = entity.getProductId();
        if (ProductId != null) {
            stmt.bindString(2, ProductId);
        }
 
        String ProductName = entity.getProductName();
        if (ProductName != null) {
            stmt.bindString(3, ProductName);
        }
 
        String ShopName = entity.getShopName();
        if (ShopName != null) {
            stmt.bindString(4, ShopName);
        }
 
        String UnitsName = entity.getUnitsName();
        if (UnitsName != null) {
            stmt.bindString(5, UnitsName);
        }
 
        String Price = entity.getPrice();
        if (Price != null) {
            stmt.bindString(6, Price);
        }
 
        String Quantity = entity.getQuantity();
        if (Quantity != null) {
            stmt.bindString(7, Quantity);
        }
 
        String Amount = entity.getAmount();
        if (Amount != null) {
            stmt.bindString(8, Amount);
        }
 
        String showEditQuantity = entity.getShowEditQuantity();
        if (showEditQuantity != null) {
            stmt.bindString(9, showEditQuantity);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CartItem readEntity(Cursor cursor, int offset) {
        CartItem entity = new CartItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ProductId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ProductName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ShopName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // UnitsName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Price
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Quantity
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Amount
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // showEditQuantity
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CartItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setProductId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProductName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShopName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnitsName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQuantity(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAmount(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setShowEditQuantity(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(CartItem entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(CartItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

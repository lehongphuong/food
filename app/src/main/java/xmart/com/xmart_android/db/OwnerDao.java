package xmart.com.xmart_android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "OWNER".
*/
public class OwnerDao extends AbstractDao<Owner, String> {

    public static final String TABLENAME = "OWNER";

    /**
     * Properties of entity Owner.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "Id", true, "ID");
        public final static Property UserName = new Property(1, String.class, "UserName", false, "USER_NAME");
        public final static Property Token  = new Property(2, String.class, "Token ", false, "TOKEN ");
        public final static Property ShopName = new Property(3, String.class, "ShopName", false, "SHOP_NAME");
        public final static Property FirstName  = new Property(4, String.class, "FirstName ", false, "FIRST_NAME ");
        public final static Property LastName = new Property(5, String.class, "LastName", false, "LAST_NAME");
        public final static Property PhoneNumber  = new Property(6, String.class, "PhoneNumber ", false, "PHONE_NUMBER ");
        public final static Property Birthday = new Property(7, String.class, "Birthday", false, "BIRTHDAY");
        public final static Property Gender = new Property(8, String.class, "Gender", false, "GENDER");
        public final static Property Image = new Property(9, String.class, "Image", false, "IMAGE");
        public final static Property ImageThumb  = new Property(10, String.class, "ImageThumb ", false, "IMAGE_THUMB ");
        public final static Property Address = new Property(11, String.class, "Address", false, "ADDRESS");
        public final static Property AddrLatitude = new Property(12, String.class, "AddrLatitude", false, "ADDR_LATITUDE");
        public final static Property AddrLongitude = new Property(13, String.class, "AddrLongitude", false, "ADDR_LONGITUDE");
    };


    public OwnerDao(DaoConfig config) {
        super(config);
    }
    
    public OwnerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OWNER\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: Id
                "\"USER_NAME\" TEXT," + // 1: UserName
                "\"TOKEN \" TEXT," + // 2: Token 
                "\"SHOP_NAME\" TEXT," + // 3: ShopName
                "\"FIRST_NAME \" TEXT," + // 4: FirstName 
                "\"LAST_NAME\" TEXT," + // 5: LastName
                "\"PHONE_NUMBER \" TEXT," + // 6: PhoneNumber 
                "\"BIRTHDAY\" TEXT," + // 7: Birthday
                "\"GENDER\" TEXT," + // 8: Gender
                "\"IMAGE\" TEXT," + // 9: Image
                "\"IMAGE_THUMB \" TEXT," + // 10: ImageThumb 
                "\"ADDRESS\" TEXT," + // 11: Address
                "\"ADDR_LATITUDE\" TEXT," + // 12: AddrLatitude
                "\"ADDR_LONGITUDE\" TEXT);"); // 13: AddrLongitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OWNER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Owner entity) {
        stmt.clearBindings();
 
        String Id = entity.getId();
        if (Id != null) {
            stmt.bindString(1, Id);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(2, UserName);
        }
 
        String Token  = entity.getToken ();
        if (Token  != null) {
            stmt.bindString(3, Token );
        }
 
        String ShopName = entity.getShopName();
        if (ShopName != null) {
            stmt.bindString(4, ShopName);
        }
 
        String FirstName  = entity.getFirstName ();
        if (FirstName  != null) {
            stmt.bindString(5, FirstName );
        }
 
        String LastName = entity.getLastName();
        if (LastName != null) {
            stmt.bindString(6, LastName);
        }
 
        String PhoneNumber  = entity.getPhoneNumber ();
        if (PhoneNumber  != null) {
            stmt.bindString(7, PhoneNumber );
        }
 
        String Birthday = entity.getBirthday();
        if (Birthday != null) {
            stmt.bindString(8, Birthday);
        }
 
        String Gender = entity.getGender();
        if (Gender != null) {
            stmt.bindString(9, Gender);
        }
 
        String Image = entity.getImage();
        if (Image != null) {
            stmt.bindString(10, Image);
        }
 
        String ImageThumb  = entity.getImageThumb ();
        if (ImageThumb  != null) {
            stmt.bindString(11, ImageThumb );
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(12, Address);
        }
 
        String AddrLatitude = entity.getAddrLatitude();
        if (AddrLatitude != null) {
            stmt.bindString(13, AddrLatitude);
        }
 
        String AddrLongitude = entity.getAddrLongitude();
        if (AddrLongitude != null) {
            stmt.bindString(14, AddrLongitude);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Owner readEntity(Cursor cursor, int offset) {
        Owner entity = new Owner( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UserName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Token 
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ShopName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // FirstName 
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // LastName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // PhoneNumber 
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Birthday
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Gender
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Image
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ImageThumb 
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // Address
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // AddrLatitude
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // AddrLongitude
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Owner entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setToken (cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShopName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFirstName (cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhoneNumber (cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBirthday(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGender(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setImage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImageThumb (cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAddress(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddrLatitude(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAddrLongitude(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Owner entity, long rowId) {
        return entity.getId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Owner entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
